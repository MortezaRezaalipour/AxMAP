function [ cumulativeNumOfN_Norm_CoBar, cumulativeNumOfN_Norm_Co, ...
           cumulativeNumOfN_Ab0_Cobar, cumulativeNumOfN_Ab0_Co, ...
           cumulativeNumOfN_Ab1_Cobar, cumulativeNumOfN_Ab1_Co] = ... 
           CumulativeNumOfNegativeNodes ... 
         ( previousNumOfP_Norm_CoBar, previousNumOfP_Norm_Co, ...
           previousNumOfP_Ab0_CoBar, previousNumOfP_Ab0_Co, ...
           previousNumOfP_Ab1_CoBar, previousNumOfP_Ab1_Co, ...
           previousNumOfN_Norm_CoBar, previousNumOfN_Norm_Co, ...
           previousNumOfN_Ab0_CoBar, previousNumOfN_Ab0_Co, ...
           previousNumOfN_Ab1_CoBar, previousNumOfN_Ab1_Co, ...
           previousNumOfZ_Co, previousNumOfZ_CoBar, ... 
           carryInProbability, currentBlock, ...
           inputDistributionA, inputDistributionB)
                                                 
    % FUNCTION DESCRIPTION: 
    % calculating the cumulative number of Positive, Negative, and Zero nodes 
        % from the first to current level

    % 1) Variable initialization----------------------------------------------
    DA = inputDistributionA;
    DB = inputDistributionB;
    errorTable = currentBlock.errorTable;
    
    if ( isequal(currentBlock.carryIn, 'No') )
        carryInProbability = 0;
    end
    PCin = carryInProbability;
                                      
    if (isequal(currentBlock.carryOut, 'No'))
        carryOutTruthTable = zeros(1, numel(errorTable));
    else
        carryOutTruthTable = currentBlock.truthTable{2};
    end
    
    % 0) MODIFY THIS SECTION 
    thisBlockNumOfP_CinBar_CoBar_Norm = 0;
    thisBlockNumOfP_CinBar_CoBar_Ab0 = 0;
    thisBlockNumOfP_CinBar_CoBar_Ab1 = 0;
    
    thisBlockNumOfP_CinBar_Co_Norm = 0;
    thisBlockNumOfP_CinBar_Co_Ab0 = 0;
    thisBlockNumOfP_CinBar_Co_Ab1 = 0;
    
    thisBlockNumOfP_Cin_CoBar_Norm = 0;
    thisBlockNumOfP_Cin_CoBar_Ab0 = 0;
    thisBlockNumOfP_Cin_CoBar_Ab1 = 0;
    
    thisBlockNumOfP_Cin_Co_Norm = 0;
    thisBlockNumOfP_Cin_Co_Ab0 = 0;
    thisBlockNumOfP_Cin_Co_Ab1 = 0;
    
        %----------------------------------------------------------------------
        %----------------------------------------------------------------------
    
    thisBlockNumOfN_CinBar_CoBar_Norm = 0;
    thisBlockNumOfN_CinBar_CoBar_Ab0 = 0;
    thisBlockNumOfN_CinBar_CoBar_Ab1 = 0;
    
    thisBlockNumOfN_CinBar_Co_Norm = 0;
    thisBlockNumOfN_CinBar_Co_Ab0 = 0;
    thisBlockNumOfN_CinBar_Co_Ab1 = 0;
    
    thisBlockNumOfN_Cin_CoBar_Norm = 0;
    thisBlockNumOfN_Cin_CoBar_Ab0 = 0;
    thisBlockNumOfN_Cin_CoBar_Ab1 = 0;
    
    thisBlockNumOfN_Cin_Co_Norm = 0;
    thisBlockNumOfN_Cin_Co_Ab0 = 0;
    thisBlockNumOfN_Cin_Co_Ab1 = 0;
    
        %----------------------------------------------------------------------
        %----------------------------------------------------------------------

    thisBlockNumOfZ_CinBar_CoBar = 0;
    thisBlockNumOfZ_CinBar_Co = 0;
    thisBlockNumOfZ_Cin_CoBar = 0;
    thisBlockNumOfZ_Cin_Co = 0;
    % 1) END --------------------------------------------------------------
    
    % 2)-------------------------------------------------------------------
    % calculating the number of Positive, Negative, and Zero edges at 
        % the current block
    
    [ thisBlockNumOfP_CinBar_CoBar_Norm, ...
    thisBlockNumOfP_CinBar_CoBar_Ab0, ...
    thisBlockNumOfP_CinBar_CoBar_Ab1, ...
    thisBlockNumOfP_CinBar_Co_Norm, ...
    thisBlockNumOfP_CinBar_Co_Ab0, ...
    thisBlockNumOfP_CinBar_Co_Ab1, ...
    thisBlockNumOfP_Cin_CoBar_Norm, ...
    thisBlockNumOfP_Cin_CoBar_Ab0, ...
    thisBlockNumOfP_Cin_CoBar_Ab1, ...
    thisBlockNumOfP_Cin_Co_Norm, ...
    thisBlockNumOfP_Cin_Co_Ab0, ...
    thisBlockNumOfP_Cin_Co_Ab1] = CurrentNumOfPositiveNodes ...
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);


    [ thisBlockNumOfN_CinBar_CoBar_Norm, ...
    thisBlockNumOfN_CinBar_CoBar_Ab0, ...
    thisBlockNumOfN_CinBar_CoBar_Ab1, ...
    thisBlockNumOfN_CinBar_Co_Norm, ...
    thisBlockNumOfN_CinBar_Co_Ab0, ...
    thisBlockNumOfN_CinBar_Co_Ab1, ...
    thisBlockNumOfN_Cin_CoBar_Norm, ...
    thisBlockNumOfN_Cin_CoBar_Ab0, ...
    thisBlockNumOfN_Cin_CoBar_Ab1, ...
    thisBlockNumOfN_Cin_Co_Norm, ...
    thisBlockNumOfN_Cin_Co_Ab0, ...
    thisBlockNumOfN_Cin_Co_Ab1 ] = CurrentNumOfNegativeNodes ... 
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);

    [ thisBlockNumOfZ_CinBar_CoBar, ...
    thisBlockNumOfZ_CinBar_Co, ...
    thisBlockNumOfZ_Cin_CoBar, ...
    thisBlockNumOfZ_Cin_Co] = CurrentNumOfZeroNodes ... 
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);
    % 2) END --------------------------------------------------------------
    
    % 3)-------------------------------------------------------------------
    if (previousNumOfP_Norm_CoBar == 0 && previousNumOfP_Norm_Co == 0  && ... 
        previousNumOfP_Ab0_CoBar == 0  && previousNumOfP_Ab0_Co == 0   && ...
        previousNumOfP_Ab1_CoBar == 0  && previousNumOfP_Ab1_Co == 0   && ...
        previousNumOfN_Norm_CoBar == 0 && previousNumOfN_Norm_Co == 0  && ...
        previousNumOfN_Ab0_CoBar == 0  && previousNumOfN_Ab0_Co  == 0  && ...
        previousNumOfN_Ab1_CoBar == 0  && previousNumOfN_Ab1_Co == 0   && ...
        previousNumOfZ_Co == 0         && previousNumOfZ_CoBar  == 0       )
    
        cumulativeNumOfN_Norm_CoBar = thisBlockNumOfN_CinBar_CoBar_Norm + ...
                                      thisBlockNumOfN_Cin_CoBar_Norm;
                                  
        cumulativeNumOfN_Norm_Co    = thisBlockNumOfN_CinBar_Co_Norm    + ...
                                      thisBlockNumOfN_Cin_Co_Norm;
                                  
        cumulativeNumOfN_Ab0_Cobar  = thisBlockNumOfN_CinBar_CoBar_Ab0  + ...
                                      thisBlockNumOfN_Cin_CoBar_Ab0;
        
        cumulativeNumOfN_Ab0_Co     = 0;
        
        cumulativeNumOfN_Ab1_Cobar  = thisBlockNumOfN_CinBar_CoBar_Ab1  + ...
                                      thisBlockNumOfN_Cin_CoBar_Ab1;
        
        cumulativeNumOfN_Ab1_Co     = 0;
        return;
    end
    % 3) END --------------------------------------------------------------
    
    % 4)-------------------------------------------------------------------
    
    % 1)
    cumulativeNumOfN_Norm_CoBar = ...
    previousNumOfN_Norm_CoBar * thisBlockNumOfN_CinBar_CoBar_Norm + ...
    previousNumOfN_Norm_Co    * thisBlockNumOfN_Cin_CoBar_Norm    + ...
    ...
    previousNumOfN_Ab1_CoBar  * thisBlockNumOfP_CinBar_CoBar_Norm    + ...
    ...
    previousNumOfP_Norm_CoBar * thisBlockNumOfN_CinBar_CoBar_Norm + ...
    previousNumOfP_Norm_Co    * thisBlockNumOfN_Cin_CoBar_Norm    + ...
    previousNumOfP_Norm_CoBar * thisBlockNumOfN_CinBar_CoBar_Ab0  + ...
    previousNumOfP_Norm_Co    * thisBlockNumOfN_Cin_CoBar_Ab0     + ...
    previousNumOfP_Ab0_Co     * thisBlockNumOfN_Cin_CoBar_Ab0     + ...
    previousNumOfP_Ab1_Co     * thisBlockNumOfN_Cin_CoBar_Ab0     + ...
    previousNumOfP_Ab1_Co     * thisBlockNumOfN_Cin_CoBar_Ab1     + ...
    ...
    previousNumOfN_Norm_CoBar * thisBlockNumOfZ_CinBar_CoBar      + ...
    previousNumOfN_Norm_Co    * thisBlockNumOfZ_Cin_CoBar         + ...
    previousNumOfN_Ab0_CoBar  * thisBlockNumOfZ_CinBar_CoBar      + ...
    previousNumOfN_Ab1_CoBar  * thisBlockNumOfZ_CinBar_CoBar      + ...
    ...
    previousNumOfZ_CoBar      * thisBlockNumOfN_CinBar_CoBar_Norm + ...
    previousNumOfZ_Co         * thisBlockNumOfN_Cin_CoBar_Norm;
    
    
    % 2)
    cumulativeNumOfN_Norm_Co = ...
    previousNumOfN_Norm_Co    * thisBlockNumOfN_Cin_Co_Norm       + ...
    ...
    previousNumOfN_Ab1_CoBar  * thisBlockNumOfP_CinBar_Co_Norm    + ...
    ...
    previousNumOfP_Norm_Co    * thisBlockNumOfN_Cin_Co_Norm       + ...
    ...
    previousNumOfN_Norm_CoBar * thisBlockNumOfZ_CinBar_Co         + ...
    previousNumOfN_Norm_Co    * thisBlockNumOfZ_Cin_Co            + ...
    previousNumOfN_Ab0_CoBar  * thisBlockNumOfZ_CinBar_Co         + ...
    previousNumOfN_Ab1_CoBar  * thisBlockNumOfZ_CinBar_Co         + ...
    ...
    previousNumOfZ_Co         * thisBlockNumOfN_Cin_Co_Norm;
    
    % 3)
    cumulativeNumOfN_Ab0_Cobar = ...
    previousNumOfN_Ab0_CoBar  * thisBlockNumOfN_CinBar_CoBar_Norm + ...
    ... 
    previousNumOfP_Ab0_Co     * thisBlockNumOfN_Cin_CoBar_Ab1     + ...
    ...
    previousNumOfZ_CoBar      * thisBlockNumOfN_CinBar_CoBar_Ab0  + ...
    previousNumOfZ_Co         * thisBlockNumOfN_Cin_CoBar_Ab0;
    
    
    
    % 4)
    cumulativeNumOfN_Ab0_Co = 0;
    
    
    % 5)
    cumulativeNumOfN_Ab1_Cobar = ...
    previousNumOfN_Norm_CoBar * thisBlockNumOfN_CinBar_CoBar_Ab0  + ...
    previousNumOfN_Norm_Co    * thisBlockNumOfN_Cin_CoBar_Ab0     + ...
    previousNumOfN_Norm_Co    * thisBlockNumOfN_Cin_CoBar_Ab1     + ...
    previousNumOfN_Ab0_CoBar  * thisBlockNumOfN_CinBar_CoBar_Ab0  + ...
    previousNumOfN_Ab1_CoBar  * thisBlockNumOfN_CinBar_CoBar_Norm + ...
    previousNumOfN_Ab1_CoBar  * thisBlockNumOfN_CinBar_CoBar_Ab0  + ...
    ...
    previousNumOfP_Norm_Co    * thisBlockNumOfN_Cin_CoBar_Ab1     + ...
    ...
    previousNumOfZ_Co         * thisBlockNumOfN_Cin_CoBar_Ab1;
    
    
    % 6)
    cumulativeNumOfN_Ab1_Co = 0;
    
    % 4) END --------------------------------------------------------------
    
    %----------------------------------------------------------------------
    
end

