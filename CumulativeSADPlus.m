function [cumulativeSADPlus_Norm_CoBar, ...
          cumulativeSADPlus_Norm_Co, ...
          cumulativeSADPlus_Ab0_CoBar, ...
          cumulativeSADPlus_Ab0_Co, ...
          cumulativeSADPlus_Ab1_CoBar, ...
          cumulativeSADPlus_Ab1_Co ...
          ] = ...
          CumulativeSADPlus ... 
          ( previousSADPlus_Norm_CoBar, previousSADPlus_Norm_Co, ...
            previousSADPlus_Ab0_CoBar, previousSADPlus_Ab0_Co, ...
            previousSADPlus_Ab1_CoBar, previousSADPlus_Ab1_Co, ...
            ...
            previousSADMinus_Norm_CoBar, previousSADMinus_Norm_Co, ...
            previousSADMinus_Ab0_CoBar, previousSADMinus_Ab0_Co, ...
            previousSADMinus_Ab1_CoBar, previousSADMinus_Ab1_Co, ...
            ...
            previousNumOfP_Norm_CoBar, previousNumOfP_Norm_Co, ...
            previousNumOfP_Ab0_CoBar, previousNumOfP_Ab0_Co, ...
            previousNumOfP_Ab1_CoBar, previousNumOfP_Ab1_Co, ...
            ...
            previousNumOfN_Norm_CoBar, previousNumOfN_Norm_Co, ...
            previousNumOfN_Ab0_CoBar, previousNumOfN_Ab0_Co, ...
            previousNumOfN_Ab1_CoBar, previousNumOfN_Ab1_Co, ...
            ...
            previousNumOfZ_CoBar, previousNumOfZ_Co, ...
            ...
            carryInProbability, currentBlock, ...
            inputDistributionA, inputDistributionB, ...
            bitPosition)

    % FUNCTION DESCRIPTION:
    
    % 1) Variable initialization----------------------------------------------
    DA = inputDistributionA;
    DB = inputDistributionB;
    
    errorTable = currentBlock.errorTable;
    
    if ( isequal(currentBlock.carryIn, 'No') )
        carryInProbability = 0;
    end
    PCin = carryInProbability;
    
    if (isequal(currentBlock.carryOut, 'No'))
        carryOutTruthTable = zeros(1, numel(errorTable));
    else
        carryOutTruthTable = currentBlock.truthTable{2};
    end
    % 1) END---------------------------------------------------------------
    
    % 2) Calculating the current variables --------------------------------
    
    % 2.1) Current Sums
    [ CurrentSumPlus_CinBar_CoBar_Norm, ...
    CurrentSumPlus_CinBar_CoBar_Ab0, ...
    CurrentSumPlus_CinBar_CoBar_Ab1, ...
    CurrentSumPlus_CinBar_Co_Norm, ...
    CurrentSumPlus_CinBar_Co_Ab0, ...
    CurrentSumPlus_CinBar_Co_Ab1, ...
    CurrentSumPlus_Cin_CoBar_Norm, ...
    CurrentSumPlus_Cin_CoBar_Ab0, ...
    CurrentSumPlus_Cin_CoBar_Ab1, ...
    CurrentSumPlus_Cin_Co_Norm, ...
    CurrentSumPlus_Cin_Co_Ab0, ...
    CurrentSumPlus_Cin_Co_Ab1 ...
    ] = CurrentSumOfPositiveErrorValues ...
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);
    

    [ CurrentSumMinus_CinBar_CoBar_Norm, ...
    CurrentSumMinus_CinBar_CoBar_Ab0, ...
    CurrentSumMinus_CinBar_CoBar_Ab1, ...
    CurrentSumMinus_CinBar_Co_Norm, ...
    CurrentSumMinus_CinBar_Co_Ab0, ...
    CurrentSumMinus_CinBar_Co_Ab1, ...
    CurrentSumMinus_Cin_CoBar_Norm, ...
    CurrentSumMinus_Cin_CoBar_Ab0, ...
    CurrentSumMinus_Cin_CoBar_Ab1, ...
    CurrentSumMinus_Cin_Co_Norm, ...
    CurrentSumMinus_Cin_Co_Ab0, ...
    CurrentSumMinus_Cin_Co_Ab1 ...
    ] = CurrentSumOfNegativeErrorValues ...
    ( carryInProbability, currentBlock, inputDistributionA, inputDistributionB);
    
    % 2.2) Current Nums
    [ thisBlockNumOfP_CinBar_CoBar_Norm, ...
    thisBlockNumOfP_CinBar_CoBar_Ab0, ...
    thisBlockNumOfP_CinBar_CoBar_Ab1, ...
    thisBlockNumOfP_CinBar_Co_Norm, ...
    thisBlockNumOfP_CinBar_Co_Ab0, ...
    thisBlockNumOfP_CinBar_Co_Ab1, ...
    thisBlockNumOfP_Cin_CoBar_Norm, ...
    thisBlockNumOfP_Cin_CoBar_Ab0, ...
    thisBlockNumOfP_Cin_CoBar_Ab1, ...
    thisBlockNumOfP_Cin_Co_Norm, ...
    thisBlockNumOfP_Cin_Co_Ab0, ...
    thisBlockNumOfP_Cin_Co_Ab1] = CurrentNumOfPositiveNodes ...
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);


    [ thisBlockNumOfN_CinBar_CoBar_Norm, ...
    thisBlockNumOfN_CinBar_CoBar_Ab0, ...
    thisBlockNumOfN_CinBar_CoBar_Ab1, ...
    thisBlockNumOfN_CinBar_Co_Norm, ...
    thisBlockNumOfN_CinBar_Co_Ab0, ...
    thisBlockNumOfN_CinBar_Co_Ab1, ...
    thisBlockNumOfN_Cin_CoBar_Norm, ...
    thisBlockNumOfN_Cin_CoBar_Ab0, ...
    thisBlockNumOfN_Cin_CoBar_Ab1, ...
    thisBlockNumOfN_Cin_Co_Norm, ...
    thisBlockNumOfN_Cin_Co_Ab0, ...
    thisBlockNumOfN_Cin_Co_Ab1 ] = CurrentNumOfNegativeNodes ... 
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);

    [ thisBlockNumOfZ_CinBar_CoBar, ...
    thisBlockNumOfZ_CinBar_Co, ...
    thisBlockNumOfZ_Cin_CoBar, ...
    thisBlockNumOfZ_Cin_Co] = CurrentNumOfZeroNodes ... 
    ( PCin, currentBlock, inputDistributionA, inputDistributionB);
    
    % 2) END --------------------------------------------------------------
    
    if ( bitPosition == 0 )
        cumulativeSADPlus_Norm_CoBar = CurrentSumPlus_CinBar_CoBar_Norm + ...
                                       CurrentSumPlus_Cin_CoBar_Norm;
                                   
        cumulativeSADPlus_Norm_Co    = CurrentSumPlus_CinBar_Co_Norm    + ...
                                       CurrentSumPlus_Cin_Co_Norm;
                                   
        cumulativeSADPlus_Ab0_CoBar  = 0;
        
        cumulativeSADPlus_Ab0_Co     = CurrentSumPlus_CinBar_Co_Ab0     + ...
                                       CurrentSumPlus_Cin_Co_Ab0;
                                   
        cumulativeSADPlus_Ab1_CoBar  = 0;
        
        cumulativeSADPlus_Ab1_Co     = CurrentSumPlus_CinBar_Co_Ab1     + ...
                                       CurrentSumPlus_Cin_Co_Ab1;
        return;
    end

    % 3) ------------------------------------------------------------------
    
    % 1)
    cumulativeSADPlus_Norm_CoBar = ...
    ...
    previousSADPlus_Norm_CoBar   * thisBlockNumOfP_CinBar_CoBar_Norm + ...
    previousSADPlus_Norm_CoBar   * thisBlockNumOfZ_CinBar_CoBar      + ...
    previousSADPlus_Norm_Co      * thisBlockNumOfZ_Cin_CoBar         + ...
    previousSADPlus_Ab0_Co       * thisBlockNumOfZ_Cin_CoBar         + ...
    previousSADPlus_Ab1_Co       * thisBlockNumOfZ_Cin_CoBar         + ...
    ...
    previousNumOfP_Norm_CoBar    * CurrentSumPlus_CinBar_CoBar_Norm  * (2^bitPosition) + ...
    previousNumOfZ_CoBar         * CurrentSumPlus_CinBar_CoBar_Norm  * (2^bitPosition) + ...
    ...
    abs(...
    previousSADPlus_Ab1_Co       * thisBlockNumOfN_Cin_CoBar_Norm    - ...
    previousNumOfP_Ab1_Co        * CurrentSumMinus_Cin_CoBar_Norm    * (2^bitPosition)) + ...
    ...
    abs(...
    previousSADMinus_Norm_CoBar  * thisBlockNumOfP_CinBar_CoBar_Norm - ...
    previousNumOfN_Norm_CoBar    * CurrentSumPlus_CinBar_CoBar_Norm  * (2^bitPosition));

    
    
    % 2)
    cumulativeSADPlus_Norm_Co = ...
    previousSADPlus_Norm_CoBar   * thisBlockNumOfP_CinBar_Co_Norm    + ...
    previousSADPlus_Norm_Co      * thisBlockNumOfP_Cin_Co_Norm       + ...
    previousSADPlus_Norm_CoBar   * thisBlockNumOfZ_CinBar_Co         + ...
    previousSADPlus_Norm_Co      * thisBlockNumOfZ_Cin_Co            + ...
    previousSADPlus_Ab0_Co       * thisBlockNumOfZ_Cin_Co            + ...
    previousSADPlus_Ab1_Co       * thisBlockNumOfZ_Cin_Co            + ...
    ...
    previousNumOfP_Norm_CoBar    * CurrentSumPlus_CinBar_Co_Norm     * (2^bitPosition) + ...
    previousNumOfP_Norm_Co       * CurrentSumPlus_Cin_Co_Norm        * (2^bitPosition) + ...
    previousNumOfZ_CoBar         * CurrentSumPlus_CinBar_Co_Norm     * (2^bitPosition) + ...
    previousNumOfZ_Co            * CurrentSumPlus_Cin_Co_Norm        * (2^bitPosition) + ...
    ...
    abs(...
    previousSADPlus_Ab1_Co       * thisBlockNumOfN_Cin_Co_Norm       - ...
    previousNumOfP_Ab1_Co        * CurrentSumMinus_Cin_Co_Norm       * (2^bitPosition)) + ...
    ...
    abs(...
    previousSADMinus_Norm_CoBar  * thisBlockNumOfP_CinBar_Co_Norm    - ...
    previousNumOfN_Norm_CoBar    * CurrentSumPlus_CinBar_Co_Norm     * (2^bitPosition)) + ...
    abs(...
    previousSADMinus_Norm_Co     * thisBlockNumOfP_Cin_Co_Norm       - ...
    previousNumOfN_Norm_Co       * CurrentSumPlus_Cin_Co_Norm        * (2^bitPosition)) + ...
    abs(...
    previousSADMinus_Norm_CoBar  * thisBlockNumOfP_CinBar_Co_Ab0     - ...
    previousNumOfN_Norm_CoBar    * CurrentSumPlus_CinBar_Co_Ab0      * (2^bitPosition)) + ...
    abs(...
    previousSADMinus_Norm_Co     * thisBlockNumOfP_Cin_Co_Ab0        - ...
    previousNumOfN_Norm_Co       * CurrentSumPlus_Cin_Co_Ab0         * (2^bitPosition)) + ...
    abs(...
    previousSADMinus_Ab0_CoBar   * thisBlockNumOfP_CinBar_Co_Ab0     - ...
    previousNumOfN_Ab0_CoBar     * CurrentSumPlus_CinBar_Co_Ab0      * (2^bitPosition)) + ...
    abs(...
    previousSADMinus_Ab1_CoBar   * thisBlockNumOfP_CinBar_Co_Ab0     - ...
    previousNumOfN_Ab1_CoBar     * CurrentSumPlus_CinBar_Co_Ab0      * (2^bitPosition)) + ...
    abs(...
    previousSADMinus_Ab1_CoBar   * thisBlockNumOfP_CinBar_Co_Ab1     - ...
    previousNumOfN_Ab1_CoBar     * CurrentSumPlus_CinBar_Co_Ab1      * (2^bitPosition));
  
    
    
    
    % 3)
    cumulativeSADPlus_Ab0_CoBar = 0;
    
    
    
    % 4)
    cumulativeSADPlus_Ab0_Co = ...
    previousSADPlus_Ab0_Co       * thisBlockNumOfP_Cin_Co_Norm      + ...
    ...
    previousNumOfP_Ab0_Co        * CurrentSumPlus_Cin_Co_Norm       * (2^bitPosition) + ...
    previousNumOfZ_CoBar         * CurrentSumPlus_CinBar_Co_Ab0     * (2^bitPosition) + ...
    previousNumOfZ_Co            * CurrentSumPlus_Cin_Co_Ab0        * (2^bitPosition) + ...
    ...
    abs(...
    previousSADMinus_Ab0_CoBar   * thisBlockNumOfP_CinBar_Co_Ab1    - ...
    previousNumOfN_Ab0_CoBar     * CurrentSumPlus_CinBar_Co_Ab1     * (2^bitPosition));

    

    % 5)
    cumulativeSADPlus_Ab1_CoBar = 0;
    
    
    % 6)
    cumulativeSADPlus_Ab1_Co = ...
    previousSADPlus_Norm_CoBar   * thisBlockNumOfP_CinBar_Co_Ab0    + ...
    previousSADPlus_Norm_Co      * thisBlockNumOfP_Cin_Co_Ab0       + ...
    previousSADPlus_Norm_CoBar   * thisBlockNumOfP_CinBar_Co_Ab1    + ...
    previousSADPlus_Ab0_Co       * thisBlockNumOfP_Cin_Co_Ab0       + ...
    previousSADPlus_Ab1_Co       * thisBlockNumOfP_Cin_Co_Norm      + ...
    previousSADPlus_Ab1_Co       * thisBlockNumOfP_Cin_Co_Ab0       + ...
    ...
    previousNumOfP_Norm_CoBar    * CurrentSumPlus_CinBar_Co_Ab0     * (2^bitPosition) + ...
    previousNumOfP_Norm_Co       * CurrentSumPlus_Cin_Co_Ab0        * (2^bitPosition) + ...
    previousNumOfP_Norm_CoBar    * CurrentSumPlus_CinBar_Co_Ab1     * (2^bitPosition) + ...
    previousNumOfP_Ab0_Co        * CurrentSumPlus_Cin_Co_Ab0        * (2^bitPosition) + ...
    previousNumOfP_Ab1_Co        * CurrentSumPlus_Cin_Co_Norm       * (2^bitPosition) + ...
    previousNumOfP_Ab1_Co        * CurrentSumPlus_Cin_Co_Ab0        * (2^bitPosition) + ...
    previousNumOfZ_CoBar         * CurrentSumPlus_CinBar_Co_Ab1     * (2^bitPosition) + ...
    ...
    abs(...
    previousSADMinus_Norm_CoBar  * thisBlockNumOfP_CinBar_Co_Ab1    - ...
    previousNumOfN_Norm_CoBar    * CurrentSumPlus_CinBar_Co_Ab1     * (2^bitPosition));
    % 3) END --------------------------------------------------------------
    %---------------------------------THE END -----------------------------
end

